c
@current_discord
c
@current_discord
c
@event
@event.update(event_params)
@event
params
c
@current_discord
c
@event.discord
Discordable
@event
params
c
params
event_params
params
c
Discord.first.region
Discord.last.region
Discord.last
Discord.first
Region.first.discord
Region.last
Region.first
Region.first.discordable
Region.first.discord
event_params
params
c
event.discorable
event.region
event.discord
event
c
Types::EventType
c
Types::EventType
exit
Types::BaseObject
Types::PhotoType
Types::EventType
BarcitizenSchema.execute(query, variables: variables, context: context, operation_name: operation_name)
query
variables
context
operation_name
c
params
variables
c
params[:query].include?("query") && !params[:query].include?("mutation")
params[:query]
c
params
query
context
variables
BarcitizenSchema.execute(query, variables: variables, context: context, operation_name: operation_name)
c
n
self
n
field_defn.user
field_defn
&block
field_class
self.usertype
self.user
self
args
n
field[:username]
field.username
field
n
UserType.field
UserType.first
UserType
BaseObject
field
self.username
:username
username
self
user
User
UserType
self
params
c
response
response.parsed_response
c
response['access_token']
response
c
response.body
c
response.redirect_uri
response[:redirect_uri]
response.data
response.body
response
c
response.body
response
c
response.body
response.code
CLIENT_SECRET
response
c
REDIRECT_URI
CLIENT_ID
params[:code]
params
response
c
current_user.user_level == "Regional Manager"
User.last
current_user.user_level
c
current_user
current_user.user_type
c
auth['extra']['raw_info']['global_name'].empty?
auth['extra']['raw_info']['username']
auth['extra']['username']
auth['info']['username']
auth['extra']['raw_info']['global_name']
request.env['omniauth.auth']
auth
c
@post
c
n
params
c
@post_category
c
@event.attendees
@giveaway
eligible_attendees
n
c
event_id
params
c
User.first
created_message?
created_discord?
created_event?
created_photo_comment?
        @user.photo_comments.joins(:photo).where.not(photos: { user_id: @user.id }).exists?
@user.photo_comments.where.not(photo: { user_id: @user.id }).exists?
@user.photo_comments.first.photo
@user.photo_comments.first
@user.photo_comments
created_photo_comment?
c
created_photo_comment?
created_photo?
c
User.first.photos
created_photo?
created_reply?
created_post?
c
Badge.find(name: badge_name)
badge_name
c
BadgeRules
BadgeRule
c
Event.last
params
@event
event
c
params
slug
c
event.status
event.status == "Closed"
event.status
event
c
@event.update(event_params)
@event
event_params
c
Region
Region.last
params[:id]
params
self
Region.find_by_slug(params[:id])
c
@badge
n
Badge.find(params[:id])
params
c
Activity.last
self
c
@photo.event
@event
c
@event
c
params
c
@current_user
current_user
c
EventManager.last
@attendees.first.event_manager_entries.first
@attendees.first.event_manager_entries
@attendees.first.event_manager
@attendees.first
@attendees.first.event_manager?
@attendees.first.manager?
@attendees.first.user
@attendees.first
@messages.first
c
@event.update(creator_id:2)
@event
@event.creator
c
params
event
@event
c
activity
activity.event
activity.user_event
activity.event
activity
c
params
params[:slug]
@event
event
c
activity.event
activity
activity.event.title
c
activity.event.title
activity.event
