c
user
@user
c
user
c
params
c
activity.user
activity.owner
activity
c
wall_comment_params
c
wall_comment_params
wall_ omment_params
WallComment.new(wall_comment_params)
WallComment.first
WallComment
c
@user
params
user
c
EventParticipation.last
EventParticipation
 EventParticipation.where(user_id: self.id).last
 EventParticipation.where(user_id: self.id).last.
self.id
c
user_ip
user_timezone
c
user_ip
c
User.last
user
payload
c
user_info
c
Activity.create(name: "User joined", description: "event-id_#{event_participation.event_id}", user_id: event_participation.event_id).errors.full_messages
Activity.create(name: "User joined", description: "event-id_#{event_participation.event_id}", user_id: event_participation.event_id).message.errors
Activity.create(name: "User joined", description: "event-id_#{event_participation.event_id}", user_id: event_participation.event_id).messages.errors
Activity.create(name: "User joined", description: "event-id_#{event_participation.event_id}", user_id: event_participation.event_id).errors.all
Activity
Activity.create(name: "User joined", description: "event-id_#{event_participation.event_id}", user_id: event_participation.event_id).errors
Activity.create(name: "User joined", description: "event-id_#{event_participation.event_id}", user_id: event_participation.event_id)
c
EventParticipation.exists?(user_id: user_id, event_id: event_id)
c
EventParticipation.find_by(input.to_h)
input.to_h
c
EventParticipation.last
UserParticipation.last
event_participation.errors.full_messages
event_participation.save
event_participation
c
event_participation.errors.full_messages
event_participation.save
event_participation
c
Event.first
event_participation.errors.full_messages
n
event_participation
n
c
input
input:
n
Types::EventParticipationType
Types::EventParticipationType,
Types::EventParticipationInputType
Types::EventParticipationInputTyp
Types::EventParticipationInputType
c
n
new_mutation_object
n
ret
n
EventParticipationType
param
params
user_id
c
params[:query]
params[:query].include?("mutation")
!params[:query].include?("mutation")
params[:query]
params[:query].
params
c
n
user
n
user_info
n
response
c
self[0]
self.first
self.title
self
this
Types::EventType.title
Types::EventType
event
self
object
c
title
self[:title]
self.title
self.discord_link
self
params
c
@current_discord
c
@current_discord
c
@event
@event.update(event_params)
@event
params
c
@current_discord
c
@event.discord
Discordable
@event
params
c
params
event_params
params
c
Discord.first.region
Discord.last.region
Discord.last
Discord.first
Region.first.discord
Region.last
Region.first
Region.first.discordable
Region.first.discord
event_params
params
c
event.discorable
event.region
event.discord
event
c
Types::EventType
c
Types::EventType
exit
Types::BaseObject
Types::PhotoType
Types::EventType
BarcitizenSchema.execute(query, variables: variables, context: context, operation_name: operation_name)
query
variables
context
operation_name
c
params
variables
c
params[:query].include?("query") && !params[:query].include?("mutation")
params[:query]
c
params
query
context
variables
BarcitizenSchema.execute(query, variables: variables, context: context, operation_name: operation_name)
c
n
self
n
field_defn.user
field_defn
&block
field_class
self.usertype
self.user
self
args
n
field[:username]
field.username
field
n
UserType.field
UserType.first
UserType
BaseObject
field
self.username
:username
username
self
user
User
UserType
self
params
c
response
response.parsed_response
c
response['access_token']
response
c
response.body
c
response.redirect_uri
response[:redirect_uri]
response.data
response.body
response
c
response.body
response
c
response.body
response.code
CLIENT_SECRET
response
c
REDIRECT_URI
CLIENT_ID
params[:code]
params
response
c
current_user.user_level == "Regional Manager"
User.last
current_user.user_level
c
current_user
current_user.user_type
c
auth['extra']['raw_info']['global_name'].empty?
auth['extra']['raw_info']['username']
auth['extra']['username']
auth['info']['username']
auth['extra']['raw_info']['global_name']
request.env['omniauth.auth']
auth
