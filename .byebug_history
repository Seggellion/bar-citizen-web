c
@region.save
@region
@region.user_id = current_user.id
current_user.id
current_user
@region.save
@region
c
JSON.parse(test_json)
test_json = '{"key": "value"}'
 JSON.parse(credentials_json)
credentials["project_id"]
credentials
credentials = JSON.parse(credentials_json)
credentials_json = File.read(credentials_path)
credentials
credentials = JSON.parse(credentials_json)
credentials_json = File.read(credentials_path)
credentials_path = Rails.root.join('google-credentials.json')
credentials_json = File.read(credentials_path)
credentials_path = Rails.root.join('/google-credentials.json')
credentials_path = Rails.root.join('google-credentials.json')
Google::Cloud::Storage
Google
c
@photo.image.attach(photo_params[:image])
photo_params[:image].inspect
c
puts File.read('./google-credentials.json')
puts File.read('../google-credentials.json')
puts File.read('/google-credentials.json')
JSON.parse(ENV['GOOGLE_CREDENTIALS'])
c
ENV['GOOGLE_APPLICATION_CREDENTIALS']
c
current_user
@event
c
current_user&.user_type <= 1
current_user
c
@post.user
@post.update(user_id:2)
@post
@post.user
c
@post.user
@post
c
user.errors.full_messages
user.errors.any?
user.inspect
user.save
exit
user.errors.all
user.errors?
user.errors
user.nil?
User.first
user.save
c
current_user
n
user_signed_in?
c
auth['extra']['raw_info']['id']
auth['extra']['raw_info']
auth[
auth['info']['id']
user.first
User
auth['info']['image']
auth['extra']['raw_info']['global_name']
auth['extra']['raw_info']
auth['extra']
auth['raw_info']
auth['info']
auth
 auth['info']['global_name']
User
auth
c
params
c
session[:user_id]
@current_user
current_user
@event.photos.build(photo_params.merge(user_id: current_user))
@photo
c
@event.photos.build(photo_params.merge(user: current_user))
photo_params
@event = Event.find(params[:event_id])
c
@event.photos.build(photo_params.merge(user: current_user))
@event.photos.build(photo_params.except(:image).merge(user: current_user))
@event = Event.find(params[:event_id])
Event.find(params[:event_id])
c
event.association(:photos).inspect
@event.association(:photo).inspect
@event.association(:photos).inspect
event
@event
@event.photos.count
c
photo
photo.image
c
Event.destroy_all
event.photos.count
event.reload
event.changed?
@event.changed?
@event
photo.image.attached?
if photo.image.attached?
@event.photos.count
photo
c
Photo.first
photo.errors.full_messages
photo.save
record.save
photo.name = "phot"
photo
c
photo
photo.update(name:"phot")
photo
c
Photo.destroy_all
photo
ActiveStorage::Attachment.where.not(blob_id: ActiveStorage::Blob.select(:id)).destroy_all
photo
@event.photos
@event.photos.destroy_all
@event.photos
@event
Photo.destroy_all
photo.destroy
photo.destroy!
photo.!destroy
photo.destroy!
photo
c
photo.destroy
photo
c
photo.image
photo
c
photo_params
c
  test_params = { photo: { image: params[:image], published: params[:published], category: params[:category], region: params[:region] } }
photo_params
@event
photo_params
params
continue
