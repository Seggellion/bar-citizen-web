c
description
Event.last
event_id
id.to_i
id.to_i == event_id
model_name == type
model_name
type
c
type
model_name
c
Activity.last.associated_with?(id,'giveaway')
Activity.last
Activity.first.associated_with?(id,'event')
id
self
activity
c
@event.activities
@event
c
cc
Activity.last
self
c
self
c
self
c
model_name
n
c
    id.split('_')[1]
id.to_i
id
model_name, id = description.split('-')
description.split('-')
description
self
c
self
c
self
c
self
c
self
c
self
c
self
c
self
c
self
c
self
c
self
c
self
c
n
this
self.description
self
description
c
EventMessage.last
EventMessage.create!(message: data['message'], user_id: current_user.id, event_id: params[:event_id])
c
find_verified_user
c
cookies
cookies.encrypted[:user_id]
self.user_id
self.user
self
session
env[:user_id]
session[:user_id]
env
@current_user
self.current_user
self
current_user
c
@giveaway.update(creator_id: current_user.id)
@giveaway.update(creator: current_user.id)
@giveaway.errors.messages
@giveaway.save.errors.messages
@giveaway.save.message
@giveaway.save
@giveaway
current_user.id
current_user
@giveaway.update(user_id: current_user.id)
@giveaway
c
drawc
c
@event.giveaways.first
@event.giveaways
@event.attendees
@event
c
giveaway_params
c
params.require(:giveaway).permit(:title, :description, :event_id, :user_id)
 @giveaway = Giveaway.find(params[:id])
@event = Event.find(params[:event_id])
giveaway_params
params
c
n
Event.find(params[:event_id])
params[:event_id]
params
c
manager
event
@event
@manager
@event_manager
c
@event_manager.update(event_id: params[:event_id])
params[:event_id]
params
EventManager.new(event_manager_params)
event_manager_params
event_manager_params)
c
params
event_manager_params
c
params[:event_managers]
params
EventManager.new(event_manager_params)
c
params
c
session
session[:viewed_photos]
session[:viewed_photos] = []
session
viewed?(photo)
photo
c
photos.first.image.url
photos.first.image
photos.first.image.first
photos.first.image.image
photos.first.image
photos.first
photos
c
current_user
@current_user.user_type
c
 c
current_user
@current_user
@username
c
current_user
@current_user
c
@post
@post_category
c
n
@post_category
n
@current_user.id
@current_user
current_user
c
post_category_params
c
@discord
c
@discord
!discord
c
@discord
c
region
c
event.save!
event.save
event
c
event
c
geocode
c
@event.save
c
@event
@event.save
c
ENV['GOOGLE_MAPS']
c
ENV['DISCORD_CLIENT_ID']
ENV['GOOGLE_MAPS']
c
@region.save
@region
@region.user_id = current_user.id
current_user.id
current_user
@region.save
@region
c
JSON.parse(test_json)
test_json = '{"key": "value"}'
 JSON.parse(credentials_json)
credentials["project_id"]
credentials
credentials = JSON.parse(credentials_json)
credentials_json = File.read(credentials_path)
credentials
credentials = JSON.parse(credentials_json)
credentials_json = File.read(credentials_path)
credentials_path = Rails.root.join('google-credentials.json')
credentials_json = File.read(credentials_path)
credentials_path = Rails.root.join('/google-credentials.json')
credentials_path = Rails.root.join('google-credentials.json')
Google::Cloud::Storage
Google
c
@photo.image.attach(photo_params[:image])
photo_params[:image].inspect
c
puts File.read('./google-credentials.json')
puts File.read('../google-credentials.json')
puts File.read('/google-credentials.json')
JSON.parse(ENV['GOOGLE_CREDENTIALS'])
c
ENV['GOOGLE_APPLICATION_CREDENTIALS']
c
current_user
@event
c
current_user&.user_type <= 1
current_user
c
@post.user
@post.update(user_id:2)
@post
@post.user
c
@post.user
@post
