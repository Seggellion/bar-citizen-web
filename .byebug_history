c
@post
c
n
params
c
@post_category
c
@event.attendees
@giveaway
eligible_attendees
n
c
event_id
params
c
User.first
created_message?
created_discord?
created_event?
created_photo_comment?
        @user.photo_comments.joins(:photo).where.not(photos: { user_id: @user.id }).exists?
@user.photo_comments.where.not(photo: { user_id: @user.id }).exists?
@user.photo_comments.first.photo
@user.photo_comments.first
@user.photo_comments
created_photo_comment?
c
created_photo_comment?
created_photo?
c
User.first.photos
created_photo?
created_reply?
created_post?
c
Badge.find(name: badge_name)
badge_name
c
BadgeRules
BadgeRule
c
Event.last
params
@event
event
c
params
slug
c
event.status
event.status == "Closed"
event.status
event
c
@event.update(event_params)
@event
event_params
c
Region
Region.last
params[:id]
params
self
Region.find_by_slug(params[:id])
c
@badge
n
Badge.find(params[:id])
params
c
Activity.last
self
c
@photo.event
@event
c
@event
c
params
c
@current_user
current_user
c
EventManager.last
@attendees.first.event_manager_entries.first
@attendees.first.event_manager_entries
@attendees.first.event_manager
@attendees.first
@attendees.first.event_manager?
@attendees.first.manager?
@attendees.first.user
@attendees.first
@messages.first
c
@event.update(creator_id:2)
@event
@event.creator
c
params
event
@event
c
activity
activity.event
activity.user_event
activity.event
activity
c
params
params[:slug]
@event
event
c
activity.event
activity
activity.event.title
c
activity.event.title
activity.event
activity
c
activity.event.title
activity.event
activity
c
activity.event
activity
c
params
c
@current_event
event
c
cc
Event.find_by_slug(params[:id])
Event
Event.find(params[:id])
params
n
@event
n
event_params
c
@event
params
event_params
c
@message
ls
c
associated_record.event_id
event_id
n
 id_fragment.split('_').last
type
model_name
c
self
c
self
c
self
c
self
c
self
c
self
c
description
self
c
Activity.last
@event.activities
@event
c
action_namec
this
self
error
errors
action_name
c
controller_name
c
controller_name
controller_name4
self
c
@section
section
Section
sectionable
Section.new(section_params.merge(sectionable: sectionable))
n
create_sectionable(section_type, sectionable_attributes)
sectionable_attributes
section_type
c
photo.update(published: true, action_id: current_user.id)
c
Event.first
Event.last
Photo.first
Photo.last
Photo.update_all(region_id:5)
Photo.update_all(region:5)
Region.last
Photo.last
photo
photo.errors.messages
photo.update(published: true, action_id: current_user.id)
photo
c
Photo.first.votes.vote
Photo.first.votes.first
Photo.first.votes
Photo.first
Photo.last
Photo.last.votes.first
PhotoComment.last.votes.first
PhotoComment.last.votes
PhotoComment.last
PostComment.last
Vote.last
Vote
Vote.last
photo.votes.count
photo.votes.votable
photo.votes.first
photo.votes
photo
c
photo
c
v
c
block.link_url.empty?
block.link_url
block
c
translation.description.empty?
translation.description.nil?
translation.description
c
translation
c
translation?
if translation end
if translation
I18n.locale.to_s
translation
block.description
block
c
